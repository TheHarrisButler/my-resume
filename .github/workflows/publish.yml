name: Build and Publish

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  pages: write

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    env:
      msg: ${{ github.event.head_commit.message }}
    steps:
      - id: setup-repo
        name: Set up repository
        uses: actions/checkout@v4
      - id: setup-typst
        name: Set up Typst
        uses: yusancky/setup-typst@v2
        with:
          version: "v0.11.0"
      - id: compile
        name: Compile Typst
        run: |
          mkdir -p "./dist"

          typst compile resume/resume.typ dist/resume.pdf
      - id: get-current-version
        name: Get Current Version
        run: |
          echo "version=$(cat ./config.json | jq -r .version)" >> $GITHUB_OUTPUT
      - id: upgrade-version
        name: Upgrade version
        run: |
          # get current version from previous step
          current_version=${{ steps.get-current-version.outputs.version }}

          # get most recent commit message on main
          commit_message="${{ env.msg }}"

          # Split up version into an array using parameter expansion with regex
          if [[ $current_version =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            declare -i major="${BASH_REMATCH[1]}"
            declare -i minor="${BASH_REMATCH[2]}"
            declare -i patch="${BASH_REMATCH[3]}"
          fi

          if [[ $commit_message =~ "feat" ]]; then
            # increment major version
            if [[ $commit_message =~ "!" ]]; then
              ((major++))
              # reset minor and patch to zero
              minor=0
              patch=0
            else
              # increment minor version
              ((minor++))
              # reset patch version
              patch=0
            fi
          fi

          # increment patch
          if [[ $commit_message =~ "fix" ]]; then
            ((patch++))
          fi

          # update version in config
          new_version="${major}.${minor}.${patch}"

          tmp=$(mktemp)

          jq --arg a "$new_version" '.version = $a' config.json > "$tmp" && mv "$tmp" config.json

          echo "version=$new_version" >> $GITHUB_OUTPUT
      - id: commit-changes
        name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: released resume version ${{ steps.upgrade-version.outputs.version }}
      - id: apply-version-to-file
        name: Apply version
        run: |
          version=${{ steps.upgrade-version.outputs.version }}

          # Split up version into an array using parameter expansion with regex
          if [[ $current_version =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            full_version="${BASH_REMATCH[0]}"
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
          fi

          base="harris-resume"
          extension="pdf"

          target_dir=./dist/resume
          target_file=(./dist/resume.pdf)

          mkdir -p "${target_dir}"

          full_version_filename="${base}v${full_version}.${extension}"
          minor_version_filename="${base}v${major}.${minor}.${extension}"
          major_version_filename="${base}v${major}.${extension}"
          latest_version_filename="${base}.${extension}"

          new_full_version_file="${build_directory}/${full_version_filename}"
          cp "$target_file" "$new_full_version_file"

          new_minor_version_file="${build_directory}/${minor_version_filename}"
          cp "$target_file" "$new_minor_version_file"

          new_major_version_file="${build_directory}/${major_version_filename}"
          cp "$target_file" "$new_major_version_file"

          new_latest_version_file="${build_directory}/${latest_version_filename}"
          cp "$target_file" "$new_latest_version_file"
      - id: upload-build-dir
        name: Upload Build dir
        uses: actions/upload-artifact@v3
        with:
          name: harris-resume
          path: ./dist/resume

  publish:
    name: "Publish Resume to S3"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_IAM_ARN }}
          role-session-name: publishResumeToS3Session
          aws-region: ${{ vars.AWS_REGION }}
      - id: download-artifact
        name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: harris-resume
          path: ./dist/resume
      - id: publish-to-s3
        name: Publish to S3
        run: |
          aws s3 sync ./dist/resume s3://${{ vars.AWS_BUCKET }}
